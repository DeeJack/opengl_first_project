#include <GLEW/glew.h>
#include <GLFW/glfw3.h>

#include <iostream>
#include <fstream>
#include "util.h"

int main(void) noexcept
{
	/* Initialize the library */
	if (!glfwInit())
		return -1;

	glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 4);
	glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);
	glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);
	
	//glEnable(GL_DEBUG)
	/* Create a windowed mode window and its OpenGL context */
	GLFWwindow* window = glfwCreateWindow(640, 480, "Hello World", nullptr, nullptr);
	if (!window)
	{
		glfwTerminate();
		return -1;
	}

	/* Make the window's context current */
	glfwMakeContextCurrent(window);

	// Create an array with the positions with no duplicate vertexes
	float positions[] = {
		-0.5F, -0.5F, // 0
		0.5F, -0.5F, // 1
		0.5F, 0.5F, // 2
		-0.5F, 0.5F, // 3
	};

	// Create an array explaining the indices of the vertex to draw
	// The first triangle is 0, 1, 2, and the second is 2, 3, 0
	unsigned int indices[] = {
		0, 1, 2,
		2, 3, 0
	};

	glfwSwapInterval(1);
	 
	if (glewInit() != GLEW_OK)
	{
		std::cout << "ERROR\n";
		return 1;
	}

	glEnable(GL_DEBUG_OUTPUT);
	glfwWindowHint(GLFW_OPENGL_DEBUG_CONTEXT, GL_TRUE);
	glDebugMessageCallback(reinterpret_cast<GLDEBUGPROC>(LOG_ERROR), nullptr);

	std::cout << glGetString(GL_VERSION) << std::endl;

	unsigned int buffer; // the buffer name
	GLCall(glGenBuffers(1, &buffer)); // Number of buffers, address of the buffers' name
	GLCall(glBindBuffer(GL_ARRAY_BUFFER, buffer)); // Bind the buffer to a buffer type
	GLCall(glBufferData(GL_ARRAY_BUFFER, 4 * 2 * sizeof(float), positions, GL_STATIC_DRAW));

	GLCall(glEnableVertexAttribArray(0));
	// Specify the layout of the vertex: 2 positions, FLOAT, the distance is 2 * sizeof(float)
	GLCall(glVertexAttribPointer(0, 2, GL_FLOAT, GL_FALSE, sizeof(float) * 2, nullptr)); // https://docs.gl/gl4/glVertexAttribPointer

	// We bind the buffer with the indices, insert the elements
	unsigned int ibo; // Index Buffer Object
	GLCall(glGenBuffers(1, &ibo)); // Number of buffers, address of the buffers' name
	GLCall(glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, ibo)); // Bind the buffer to a buffer type
	GLCall(glBufferData(GL_ELEMENT_ARRAY_BUFFER, 6 * sizeof(unsigned int), indices, GL_STATIC_DRAW));
	
	const auto source = ParseShader("res/shaders/Basic.shader");
	const unsigned int shader = CreateShader(source.VertexSource, source.FragmentSource);
	GLCall(glUseProgram(shader));

	GLCall(const int location = glGetUniformLocation(shader, "u_Color")); // Get the location of the uniform
	ASSERT(location != -1);
	// Create the uniform for the color
	GLCall(glUniform4f(location, 0.2F, 0.3F, 0.8F, 1.0F)); // 4 because they are 4 elements, f because they are float

	float r = 0.0F;
	float increment = 0.05F;
	/* Loop until the user closes the window */
	while (!glfwWindowShouldClose(window))
	{
		/* Render here */
		glClear(GL_COLOR_BUFFER_BIT);

		glUniform4f(location, r, 0.3F, 0.8F, 1.0F);
		GLCall(glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, nullptr)); // The indices pointer is already bound

		if (r > 1.0F)
			increment = -0.05F;
		else if (r < 0.0F)
			increment = 0.05F;

		r += increment;
		
		/* Swap front and back buffers */
		glfwSwapBuffers(window);

		/* Poll for and process events */
		glfwPollEvents();
	}

	glDeleteProgram(shader);

	glfwTerminate();
	return 0;
}