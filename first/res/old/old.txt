Triangle:
int main(void)
{
	/* Initialize the library */
	if (!glfwInit())
		return -1;

	/* Create a windowed mode window and its OpenGL context */
	GLFWwindow* window = glfwCreateWindow(640, 480, "Hello World", NULL, NULL);
	if (!window)
	{
		glfwTerminate();
		return -1;
	}

	/* Make the window's context current */
	glfwMakeContextCurrent(window);

	float positions[6] = {
		-0.5F, -0.5F,
		0.0F, 0.5F,
		0.5F, -0.5F
	};

	if (glewInit() != GLEW_OK)
	{
		std::cout << "ERROR\n";
		return 1;
	}

	std::cout << glGetString(GL_VERSION) << std::endl;

	unsigned int buffer; // the buffer name
	glGenBuffers(1, &buffer); // Number of buffers, address of the buffers' name
	glBindBuffer(GL_ARRAY_BUFFER, buffer); // Bind the buffer to a buffer type
	glBufferData(GL_ARRAY_BUFFER, 6 * sizeof(float), positions, GL_STATIC_DRAW);

	glEnableVertexAttribArray(0);
	glVertexAttribPointer(0, 2, GL_FLOAT, GL_FALSE, sizeof(float) * 2, 0); // https://docs.gl/gl4/glVertexAttribPointer

	auto source = ParseShader("res/shaders/Basic.shader");
	const unsigned int shader = CreateShader(source.VertexSource, source.FragmentSource);
	glUseProgram(shader);

	/* Loop until the user closes the window */
	while (!glfwWindowShouldClose(window))
	{
		/* Render here */
		glClear(GL_COLOR_BUFFER_BIT);

		glDrawArrays(GL_TRIANGLES, 0, 3); // Draw the bound array

		/* Swap front and back buffers */
		glfwSwapBuffers(window);

		/* Poll for and process events */
		glfwPollEvents();
	}

	glDeleteProgram(shader);

	glfwTerminate();
	return 0;
}